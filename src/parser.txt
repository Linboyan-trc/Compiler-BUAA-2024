///////////////////// ConstDecl /////////////////////
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// ConstDecl /////////////////////
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR c
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// ConstDecl /////////////////////
CONSTTK const
INTTK int
IDENFR d
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// ConstDecl /////////////////////
CONSTTK const
INTTK int
IDENFR e
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACE }
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR f
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// ConstDecl /////////////////////
CONSTTK const
CHARTK char
IDENFR g
ASSIGN =
CHRCON 'g'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// ConstDecl /////////////////////
CONSTTK const
CHARTK char
IDENFR h
ASSIGN =
CHRCON 'h'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR i
ASSIGN =
CHRCON 'i'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// ConstDecl /////////////////////
CONSTTK const
CHARTK char
IDENFR j
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '0'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '2'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '3'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '4'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// ConstDecl /////////////////////
CONSTTK const
CHARTK char
IDENFR k
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '0'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '2'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '3'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '4'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACE }
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR l
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '0'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '2'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '3'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
CHRCON '4'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// ConstDecl /////////////////////
CONSTTK const
CHARTK char
IDENFR a10
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
STRCON "1234"
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
///////////////////// VarDecl /////////////////////
INTTK int
IDENFR m
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
INTTK int
IDENFR n
<VarDef>
COMMA ,
IDENFR o
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
INTTK int
IDENFR p
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
INTTK int
IDENFR q
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
COMMA ,
IDENFR r
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
INTTK int
IDENFR s
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
INTTK int
IDENFR t
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR u
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
INTTK int
IDENFR v
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
INTTK int
IDENFR w
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACE }
<InitVal>
<VarDef>
COMMA ,
IDENFR x
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR y
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR z
<VarDef>
COMMA ,
IDENFR aa
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR bb
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR cc
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
COMMA ,
IDENFR dd
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR ee
ASSIGN =
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR ff
ASSIGN =
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR gg
ASSIGN =
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR hh
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR ii
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACE }
<InitVal>
<VarDef>
COMMA ,
IDENFR jj
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '1'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// VarDecl /////////////////////
CHARTK char
IDENFR a11
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
STRCON "1234"
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
///////////////////// FuncDef /////////////////////
VOIDTK void
<FuncType>
IDENFR kk
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR ll
LPARENT (
INTTK int
IDENFR a
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RBRACE }
<Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR mm
LPARENT (
INTTK int
IDENFR a
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RBRACE }
<Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR nn
LPARENT (
INTTK int
IDENFR a
LBRACK [
<FuncFParam>
<FuncFParams>
RBRACK ]
RPARENT )
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
LBRACE {
RBRACE }
<Block>
<Stmt>
VOIDTK void
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
IDENFR oo
LPARENT (
INTTK int
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
IDENFR a
LBRACK [
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
COMMA ,
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
INTTK int
IDENFR b
LBRACK [
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<VarDef>
<VarDecl>
RPARENT )
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
LBRACE {
RBRACE }
<Block>
<Stmt>
INTTK int
IDENFR pp
<VarDef>
<VarDecl>
LPARENT (
RPARENT )
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
LBRACE {
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR qq
LPARENT (
INTTK int
IDENFR a
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR rr
LPARENT (
INTTK int
IDENFR a
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
IDENFR pp
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR ss
LPARENT (
INTTK int
IDENFR a
LBRACK [
<FuncFParam>
<FuncFParams>
RBRACK ]
RPARENT )
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
LBRACE {
RETURNTK return
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
INTTK int
IDENFR tt
<VarDef>
<VarDecl>
LPARENT (
INTTK int
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
IDENFR a
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
LBRACK [
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
COMMA ,
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
INTTK int
IDENFR b
LBRACK [
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<VarDef>
<VarDecl>
RPARENT )
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
LBRACE {
RETURNTK return
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
CHARTK char
IDENFR uu
<VarDef>
<VarDecl>
LPARENT (
RPARENT )
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
LBRACE {
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
RETURNTK return
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
CHARTK char
<FuncType>
IDENFR vv
LPARENT (
CHARTK char
IDENFR a
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
CHARTK char
<FuncType>
IDENFR ww
LPARENT (
CHARTK char
IDENFR a
<FuncFParam>
COMMA ,
CHARTK char
IDENFR b
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
CHARTK char
<FuncType>
IDENFR xx
LPARENT (
CHARTK char
IDENFR a
LBRACK [
<FuncFParam>
<FuncFParams>
RBRACK ]
RPARENT )
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
LBRACE {
RETURNTK return
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
CHARTK char
IDENFR yy
<VarDef>
<VarDecl>
LPARENT (
CHARTK char
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
IDENFR a
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
LBRACK [
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
COMMA ,
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
CHARTK char
IDENFR b
LBRACK [
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<VarDef>
<VarDecl>
RPARENT )
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
LBRACE {
RETURNTK return
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
INTTK int
MAINTK main
<VarDef>
<VarDecl>
LPARENT (
<LVal>
RPARENT )
LBRACE {
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<Stmt>
CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR a2
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR a3
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR a12
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
CHARTK char
IDENFR a4
ASSIGN =
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
CHARTK char
IDENFR a5
ASSIGN =
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR a6
ASSIGN =
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
CHARTK char
IDENFR a13
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
STRCON "1234"
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
INTTK int
IDENFR xx
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR zz
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR a_a
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR b_b
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR a14
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
CHARTK char
IDENFR c_c
<VarDef>
SEMICN ;
<VarDecl>
CHARTK char
IDENFR d_d
ASSIGN =
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
CHARTK char
IDENFR e_e
ASSIGN =
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR f_f
ASSIGN =
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
CHARTK char
IDENFR a15
LBRACK [
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
STRCON "1234"
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR a7
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR a8
ASSIGN =
IDENFR a_a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR b_b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR a9
ASSIGN =
IDENFR pp
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
IDENFR a9
<LVal>
ASSIGN =
IDENFR a9
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR a9
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR a14
LBRACK [
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
LPARENT (
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR pp
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR qq
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PLUS +
<UnaryOp>
IDENFR pp
LPARENT (
RPARENT )
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PLUS +
<UnaryOp>
IDENFR qq
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PLUS +
<UnaryOp>
IDENFR rr
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR qq
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
MINU -
IDENFR qq
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR rr
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR rr
LPARENT (
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR rr
LPARENT (
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
IDENFR b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PLUS +
<UnaryOp>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
MINU -
<UnaryOp>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
NOT !
<UnaryOp>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR rr
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
LPARENT (
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
IDENFR rr
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
LPARENT (
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR rr
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
LPARENT (
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
IDENFR rr
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
CHRCON 'c'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
LPARENT (
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
IDENFR rr
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
LPARENT (
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR rr
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
LBRACE {
RBRACE }
<Block>
<Stmt>
LBRACE {
INTTK int
IDENFR g_g
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
LBRACE {
INTTK int
IDENFR g_g
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
RBRACE }
<Block>
<Stmt>
RBRACE }
<Block>
<Stmt>
IFTK if
LPARENT (
NOT !
<UnaryOp>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
SEMICN ;
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ !=
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
SEMICN ;
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
IDENFR zz
<LVal>
ASSIGN =
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
IDENFR zz
<LVal>
ASSIGN =
IDENFR zz
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
ELSETK else
LBRACE {
IDENFR zz
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ !=
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND &&
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
SEMICN ;
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR ||
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
SEMICN ;
<Stmt>
<Stmt>
INTTK int
IDENFR i_vice
<VarDef>
SEMICN ;
<VarDecl>
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IDENFR i_vice
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
FORTK for
LPARENT (
SEMICN ;
IDENFR i_vice
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
IDENFR i_vice
<LVal>
ASSIGN =
IDENFR i_vice
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
LBRACE {
RBRACE }
<Block>
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR i_vice
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
SEMICN ;
IDENFR i_vice
<LVal>
ASSIGN =
IDENFR i_vice
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR i_vice
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
IDENFR i_vice
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IDENFR i_vice
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i_vice
<LVal>
ASSIGN =
IDENFR i_vice
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IDENFR i_vice
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
FORTK for
LPARENT (
SEMICN ;
IDENFR i_vice
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR i_vice
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR i_vice
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
IDENFR i_vice
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
